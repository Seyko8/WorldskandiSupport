const { SUPPORT_GROUP_ID } = require('../config');
const { Markup } = require('telegraf');
const { activeThreads } = require('./supportState');

function registerSupportActions(bot) {
  // ‚úÖ Akzeptieren ‚Üí Thread erstellen
  bot.action(/^accept_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    const username = ctx.update.callback_query?.message?.text?.match(/@(\w+)/)?.[1] || 'User';

    try {
      // Neues Thema erstellen
      const thread = await ctx.telegram.createForumTopic(SUPPORT_GROUP_ID, `üßæ Support ‚Äì @${username}`);
      const threadId = thread.message_thread_id;

      // Ticket speichern
      activeThreads[userId] = threadId;

      // User benachrichtigen
      await ctx.telegram.sendMessage(userId, '‚úÖ Ein Admin k√ºmmert sich gleich um dein Anliegen.');

      // User-Nachricht (aus General) ins neue Thema weiterleiten
      const originalMessage = ctx.update.callback_query.message.reply_to_message;
      if (originalMessage) {
        const caption = `üì© *Support-Anfrage*\nüë§ @${username}\nüÜî \`${userId}\``;
        await ctx.telegram.copyMessage(SUPPORT_GROUP_ID, SUPPORT_GROUP_ID, originalMessage.message_id, {
          message_thread_id: threadId,
          caption,
          parse_mode: 'Markdown'
        });
      }

      // Hinweis + Button im neuen Thread posten
      await ctx.telegram.sendMessage(SUPPORT_GROUP_ID, `üì® Ticket von @${username} √ºbernommen.`, {
        message_thread_id: threadId
      });

      await ctx.telegram.sendMessage(SUPPORT_GROUP_ID, 'üõë Ticket abschlie√üen?', {
        message_thread_id: threadId,
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ Ticket abschlie√üen', `close_${userId}`)]
        ])
      });

      // Buttons in General entfernen
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

      await ctx.answerCbQuery('Ticket akzeptiert.');
    } catch (err) {
      console.error('‚ùå Fehler beim Thread-Erstellen:', err);
      await ctx.reply('‚ö†Ô∏è Fehler beim Erstellen des Threads.');
    }
  });

  // ‚ùå Ablehnen
  bot.action(/^deny_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    delete activeThreads[userId];

    try {
      await ctx.telegram.sendMessage(userId, '‚ùå Deine Support-Anfrage wurde abgelehnt.');
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
      await ctx.answerCbQuery('Ticket abgelehnt.');
    } catch (err) {
      console.error('‚ùå Fehler beim Ablehnen:', err.message);
    }
  });

  // ‚úÖ Ticket abschlie√üen
  bot.action(/^close_(\d+)$/, async (ctx) => {
    const userId = ctx.match[1];
    delete activeThreads[userId];

    try {
      await ctx.telegram.sendMessage(userId, '‚úÖ Dein Ticket wurde abgeschlossen.');
      await ctx.answerCbQuery('Ticket abgeschlossen.');
    } catch (err) {
      console.error('‚ùå Fehler beim Abschlie√üen:', err.message);
    }
  });
}

module.exports = registerSupportActions;